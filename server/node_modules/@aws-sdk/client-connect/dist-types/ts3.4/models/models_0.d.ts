import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ConnectServiceException as __BaseException } from "./ConnectServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const ActionType: {
  readonly ASSIGN_CONTACT_CATEGORY: "ASSIGN_CONTACT_CATEGORY";
  readonly CREATE_CASE: "CREATE_CASE";
  readonly CREATE_TASK: "CREATE_TASK";
  readonly END_ASSOCIATED_TASKS: "END_ASSOCIATED_TASKS";
  readonly GENERATE_EVENTBRIDGE_EVENT: "GENERATE_EVENTBRIDGE_EVENT";
  readonly SEND_NOTIFICATION: "SEND_NOTIFICATION";
  readonly SUBMIT_AUTO_EVALUATION: "SUBMIT_AUTO_EVALUATION";
  readonly UPDATE_CASE: "UPDATE_CASE";
};
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export interface ActionSummary {
  ActionType: ActionType | undefined;
}
export interface ActivateEvaluationFormRequest {
  InstanceId: string | undefined;
  EvaluationFormId: string | undefined;
  EvaluationFormVersion: number | undefined;
}
export interface ActivateEvaluationFormResponse {
  EvaluationFormId: string | undefined;
  EvaluationFormArn: string | undefined;
  EvaluationFormVersion: number | undefined;
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class ResourceConflictException extends __BaseException {
  readonly name: "ResourceConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceConflictException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const AgentAvailabilityTimer: {
  readonly TIME_SINCE_LAST_ACTIVITY: "TIME_SINCE_LAST_ACTIVITY";
  readonly TIME_SINCE_LAST_INBOUND: "TIME_SINCE_LAST_INBOUND";
};
export type AgentAvailabilityTimer =
  (typeof AgentAvailabilityTimer)[keyof typeof AgentAvailabilityTimer];
export interface Distribution {
  Region: string | undefined;
  Percentage: number | undefined;
}
export interface AgentConfig {
  Distributions: Distribution[] | undefined;
}
export declare const ContactState: {
  readonly CONNECTED: "CONNECTED";
  readonly CONNECTED_ONHOLD: "CONNECTED_ONHOLD";
  readonly CONNECTING: "CONNECTING";
  readonly ENDED: "ENDED";
  readonly ERROR: "ERROR";
  readonly INCOMING: "INCOMING";
  readonly MISSED: "MISSED";
  readonly PENDING: "PENDING";
  readonly REJECTED: "REJECTED";
};
export type ContactState = (typeof ContactState)[keyof typeof ContactState];
export declare const Channel: {
  readonly CHAT: "CHAT";
  readonly TASK: "TASK";
  readonly VOICE: "VOICE";
};
export type Channel = (typeof Channel)[keyof typeof Channel];
export declare const ContactInitiationMethod: {
  readonly API: "API";
  readonly CALLBACK: "CALLBACK";
  readonly DISCONNECT: "DISCONNECT";
  readonly EXTERNAL_OUTBOUND: "EXTERNAL_OUTBOUND";
  readonly INBOUND: "INBOUND";
  readonly MONITOR: "MONITOR";
  readonly OUTBOUND: "OUTBOUND";
  readonly QUEUE_TRANSFER: "QUEUE_TRANSFER";
  readonly TRANSFER: "TRANSFER";
};
export type ContactInitiationMethod =
  (typeof ContactInitiationMethod)[keyof typeof ContactInitiationMethod];
export interface QueueReference {
  Id?: string;
  Arn?: string;
}
export interface AgentContactReference {
  ContactId?: string;
  Channel?: Channel;
  InitiationMethod?: ContactInitiationMethod;
  AgentContactState?: ContactState;
  StateStartTimestamp?: Date;
  ConnectedToAgentTimestamp?: Date;
  Queue?: QueueReference;
}
export interface AgentHierarchyGroups {
  L1Ids?: string[];
  L2Ids?: string[];
  L3Ids?: string[];
  L4Ids?: string[];
  L5Ids?: string[];
}
export interface AgentInfo {
  Id?: string;
  ConnectedToAgentTimestamp?: Date;
  AgentPauseDurationInSeconds?: number;
}
export declare const AgentStatusState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AgentStatusState =
  (typeof AgentStatusState)[keyof typeof AgentStatusState];
export declare const AgentStatusType: {
  readonly CUSTOM: "CUSTOM";
  readonly OFFLINE: "OFFLINE";
  readonly ROUTABLE: "ROUTABLE";
};
export type AgentStatusType =
  (typeof AgentStatusType)[keyof typeof AgentStatusType];
export interface AgentStatus {
  AgentStatusARN?: string;
  AgentStatusId?: string;
  Name?: string;
  Description?: string;
  Type?: AgentStatusType;
  DisplayOrder?: number;
  State?: AgentStatusState;
  Tags?: Record<string, string>;
  LastModifiedTime?: Date;
  LastModifiedRegion?: string;
}
export interface AgentStatusReference {
  StatusStartTimestamp?: Date;
  StatusArn?: string;
  StatusName?: string;
}
export interface AgentStatusSummary {
  Id?: string;
  Arn?: string;
  Name?: string;
  Type?: AgentStatusType;
  LastModifiedTime?: Date;
  LastModifiedRegion?: string;
}
export declare const VideoCapability: {
  readonly SEND: "SEND";
};
export type VideoCapability =
  (typeof VideoCapability)[keyof typeof VideoCapability];
export interface ParticipantCapabilities {
  Video?: VideoCapability;
}
export interface AllowedCapabilities {
  Customer?: ParticipantCapabilities;
  Agent?: ParticipantCapabilities;
}
export declare const MonitorCapability: {
  readonly BARGE: "BARGE";
  readonly SILENT_MONITOR: "SILENT_MONITOR";
};
export type MonitorCapability =
  (typeof MonitorCapability)[keyof typeof MonitorCapability];
export interface AssociateAnalyticsDataSetRequest {
  InstanceId: string | undefined;
  DataSetId: string | undefined;
  TargetAccountId?: string;
}
export interface AssociateAnalyticsDataSetResponse {
  DataSetId?: string;
  TargetAccountId?: string;
  ResourceShareId?: string;
  ResourceShareArn?: string;
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export interface AssociateApprovedOriginRequest {
  InstanceId: string | undefined;
  Origin: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface LexBot {
  Name: string | undefined;
  LexRegion: string | undefined;
}
export interface LexV2Bot {
  AliasArn?: string;
}
export interface AssociateBotRequest {
  InstanceId: string | undefined;
  LexBot?: LexBot;
  LexV2Bot?: LexV2Bot;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare const VocabularyLanguageCode: {
  readonly AR_AE: "ar-AE";
  readonly DE_CH: "de-CH";
  readonly DE_DE: "de-DE";
  readonly EN_AB: "en-AB";
  readonly EN_AU: "en-AU";
  readonly EN_GB: "en-GB";
  readonly EN_IE: "en-IE";
  readonly EN_IN: "en-IN";
  readonly EN_NZ: "en-NZ";
  readonly EN_US: "en-US";
  readonly EN_WL: "en-WL";
  readonly EN_ZA: "en-ZA";
  readonly ES_ES: "es-ES";
  readonly ES_US: "es-US";
  readonly FR_CA: "fr-CA";
  readonly FR_FR: "fr-FR";
  readonly HI_IN: "hi-IN";
  readonly IT_IT: "it-IT";
  readonly JA_JP: "ja-JP";
  readonly KO_KR: "ko-KR";
  readonly PT_BR: "pt-BR";
  readonly PT_PT: "pt-PT";
  readonly ZH_CN: "zh-CN";
};
export type VocabularyLanguageCode =
  (typeof VocabularyLanguageCode)[keyof typeof VocabularyLanguageCode];
export interface AssociateDefaultVocabularyRequest {
  InstanceId: string | undefined;
  LanguageCode: VocabularyLanguageCode | undefined;
  VocabularyId?: string;
}
export interface AssociateDefaultVocabularyResponse {}
export declare const FlowAssociationResourceType: {
  readonly SMS_PHONE_NUMBER: "SMS_PHONE_NUMBER";
};
export type FlowAssociationResourceType =
  (typeof FlowAssociationResourceType)[keyof typeof FlowAssociationResourceType];
export interface AssociateFlowRequest {
  InstanceId: string | undefined;
  ResourceId: string | undefined;
  FlowId: string | undefined;
  ResourceType: FlowAssociationResourceType | undefined;
}
export interface AssociateFlowResponse {}
export declare const InstanceStorageResourceType: {
  readonly AGENT_EVENTS: "AGENT_EVENTS";
  readonly ATTACHMENTS: "ATTACHMENTS";
  readonly CALL_RECORDINGS: "CALL_RECORDINGS";
  readonly CHAT_TRANSCRIPTS: "CHAT_TRANSCRIPTS";
  readonly CONTACT_EVALUATIONS: "CONTACT_EVALUATIONS";
  readonly CONTACT_TRACE_RECORDS: "CONTACT_TRACE_RECORDS";
  readonly MEDIA_STREAMS: "MEDIA_STREAMS";
  readonly REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS";
  readonly REAL_TIME_CONTACT_ANALYSIS_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS";
  readonly REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS";
  readonly SCHEDULED_REPORTS: "SCHEDULED_REPORTS";
  readonly SCREEN_RECORDINGS: "SCREEN_RECORDINGS";
};
export type InstanceStorageResourceType =
  (typeof InstanceStorageResourceType)[keyof typeof InstanceStorageResourceType];
export interface KinesisFirehoseConfig {
  FirehoseArn: string | undefined;
}
export interface KinesisStreamConfig {
  StreamArn: string | undefined;
}
export declare const EncryptionType: {
  readonly KMS: "KMS";
};
export type EncryptionType =
  (typeof EncryptionType)[keyof typeof EncryptionType];
export interface EncryptionConfig {
  EncryptionType: EncryptionType | undefined;
  KeyId: string | undefined;
}
export interface KinesisVideoStreamConfig {
  Prefix: string | undefined;
  RetentionPeriodHours: number | undefined;
  EncryptionConfig: EncryptionConfig | undefined;
}
export interface S3Config {
  BucketName: string | undefined;
  BucketPrefix: string | undefined;
  EncryptionConfig?: EncryptionConfig;
}
export declare const StorageType: {
  readonly KINESIS_FIREHOSE: "KINESIS_FIREHOSE";
  readonly KINESIS_STREAM: "KINESIS_STREAM";
  readonly KINESIS_VIDEO_STREAM: "KINESIS_VIDEO_STREAM";
  readonly S3: "S3";
};
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
export interface InstanceStorageConfig {
  AssociationId?: string;
  StorageType: StorageType | undefined;
  S3Config?: S3Config;
  KinesisVideoStreamConfig?: KinesisVideoStreamConfig;
  KinesisStreamConfig?: KinesisStreamConfig;
  KinesisFirehoseConfig?: KinesisFirehoseConfig;
}
export interface AssociateInstanceStorageConfigRequest {
  InstanceId: string | undefined;
  ResourceType: InstanceStorageResourceType | undefined;
  StorageConfig: InstanceStorageConfig | undefined;
}
export interface AssociateInstanceStorageConfigResponse {
  AssociationId?: string;
}
export interface AssociateLambdaFunctionRequest {
  InstanceId: string | undefined;
  FunctionArn: string | undefined;
}
export interface AssociateLexBotRequest {
  InstanceId: string | undefined;
  LexBot: LexBot | undefined;
}
export interface AssociatePhoneNumberContactFlowRequest {
  PhoneNumberId: string | undefined;
  InstanceId: string | undefined;
  ContactFlowId: string | undefined;
}
export interface AssociateQueueQuickConnectsRequest {
  InstanceId: string | undefined;
  QueueId: string | undefined;
  QuickConnectIds: string[] | undefined;
}
export interface RoutingProfileQueueReference {
  QueueId: string | undefined;
  Channel: Channel | undefined;
}
export interface RoutingProfileQueueConfig {
  QueueReference: RoutingProfileQueueReference | undefined;
  Priority: number | undefined;
  Delay: number | undefined;
}
export interface AssociateRoutingProfileQueuesRequest {
  InstanceId: string | undefined;
  RoutingProfileId: string | undefined;
  QueueConfigs: RoutingProfileQueueConfig[] | undefined;
}
export interface AssociateSecurityKeyRequest {
  InstanceId: string | undefined;
  Key: string | undefined;
}
export interface AssociateSecurityKeyResponse {
  AssociationId?: string;
}
export interface AssociateTrafficDistributionGroupUserRequest {
  TrafficDistributionGroupId: string | undefined;
  UserId: string | undefined;
  InstanceId: string | undefined;
}
export interface AssociateTrafficDistributionGroupUserResponse {}
export interface UserProficiency {
  AttributeName: string | undefined;
  AttributeValue: string | undefined;
  Level: number | undefined;
}
export interface AssociateUserProficienciesRequest {
  InstanceId: string | undefined;
  UserId: string | undefined;
  UserProficiencies: UserProficiency[] | undefined;
}
export interface BatchAssociateAnalyticsDataSetRequest {
  InstanceId: string | undefined;
  DataSetIds: string[] | undefined;
  TargetAccountId?: string;
}
export interface AnalyticsDataAssociationResult {
  DataSetId?: string;
  TargetAccountId?: string;
  ResourceShareId?: string;
  ResourceShareArn?: string;
}
export interface ErrorResult {
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface BatchAssociateAnalyticsDataSetResponse {
  Created?: AnalyticsDataAssociationResult[];
  Errors?: ErrorResult[];
}
export interface BatchDisassociateAnalyticsDataSetRequest {
  InstanceId: string | undefined;
  DataSetIds: string[] | undefined;
  TargetAccountId?: string;
}
export interface BatchDisassociateAnalyticsDataSetResponse {
  Deleted?: string[];
  Errors?: ErrorResult[];
}
export declare const ListFlowAssociationResourceType: {
  readonly VOICE_PHONE_NUMBER: "VOICE_PHONE_NUMBER";
};
export type ListFlowAssociationResourceType =
  (typeof ListFlowAssociationResourceType)[keyof typeof ListFlowAssociationResourceType];
export interface BatchGetFlowAssociationRequest {
  InstanceId: string | undefined;
  ResourceIds: string[] | undefined;
  ResourceType?: ListFlowAssociationResourceType;
}
export interface FlowAssociationSummary {
  ResourceId?: string;
  FlowId?: string;
  ResourceType?: ListFlowAssociationResourceType;
}
export interface BatchGetFlowAssociationResponse {
  FlowAssociationSummaryList?: FlowAssociationSummary[];
}
export interface Campaign {
  CampaignId?: string;
}
export declare const EndpointType: {
  readonly CONTACT_FLOW: "CONTACT_FLOW";
  readonly TELEPHONE_NUMBER: "TELEPHONE_NUMBER";
  readonly VOIP: "VOIP";
};
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export interface Endpoint {
  Type?: EndpointType;
  Address?: string;
}
export interface ContactDataRequest {
  SystemEndpoint?: Endpoint;
  CustomerEndpoint?: Endpoint;
  RequestIdentifier?: string;
  QueueId?: string;
  Attributes?: Record<string, string>;
  Campaign?: Campaign;
}
export interface BatchPutContactRequest {
  ClientToken?: string;
  InstanceId: string | undefined;
  ContactDataRequestList: ContactDataRequest[] | undefined;
}
export declare const FailureReasonCode: {
  readonly IDEMPOTENCY_EXCEPTION: "IDEMPOTENCY_EXCEPTION";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly INVALID_ATTRIBUTE_KEY: "INVALID_ATTRIBUTE_KEY";
  readonly INVALID_CUSTOMER_ENDPOINT: "INVALID_CUSTOMER_ENDPOINT";
  readonly INVALID_QUEUE: "INVALID_QUEUE";
  readonly INVALID_SYSTEM_ENDPOINT: "INVALID_SYSTEM_ENDPOINT";
  readonly MISSING_CAMPAIGN: "MISSING_CAMPAIGN";
  readonly MISSING_CUSTOMER_ENDPOINT: "MISSING_CUSTOMER_ENDPOINT";
  readonly MISSING_QUEUE_ID_AND_SYSTEM_ENDPOINT: "MISSING_QUEUE_ID_AND_SYSTEM_ENDPOINT";
  readonly REQUEST_THROTTLED: "REQUEST_THROTTLED";
};
export type FailureReasonCode =
  (typeof FailureReasonCode)[keyof typeof FailureReasonCode];
export interface FailedRequest {
  RequestIdentifier?: string;
  FailureReasonCode?: FailureReasonCode;
  FailureReasonMessage?: string;
}
export interface SuccessfulRequest {
  RequestIdentifier?: string;
  ContactId?: string;
}
export interface BatchPutContactResponse {
  SuccessfulRequestList?: SuccessfulRequest[];
  FailedRequestList?: FailedRequest[];
}
export declare class IdempotencyException extends __BaseException {
  readonly name: "IdempotencyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IdempotencyException, __BaseException>
  );
}
export interface ClaimPhoneNumberRequest {
  TargetArn?: string;
  InstanceId?: string;
  PhoneNumber: string | undefined;
  PhoneNumberDescription?: string;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export interface ClaimPhoneNumberResponse {
  PhoneNumberId?: string;
  PhoneNumberArn?: string;
}
export interface CreateAgentStatusRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  State: AgentStatusState | undefined;
  DisplayOrder?: number;
  Tags?: Record<string, string>;
}
export interface CreateAgentStatusResponse {
  AgentStatusARN?: string;
  AgentStatusId?: string;
}
export declare class DuplicateResourceException extends __BaseException {
  readonly name: "DuplicateResourceException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DuplicateResourceException, __BaseException>
  );
}
export declare const ContactFlowType: {
  readonly AGENT_HOLD: "AGENT_HOLD";
  readonly AGENT_TRANSFER: "AGENT_TRANSFER";
  readonly AGENT_WHISPER: "AGENT_WHISPER";
  readonly CONTACT_FLOW: "CONTACT_FLOW";
  readonly CUSTOMER_HOLD: "CUSTOMER_HOLD";
  readonly CUSTOMER_QUEUE: "CUSTOMER_QUEUE";
  readonly CUSTOMER_WHISPER: "CUSTOMER_WHISPER";
  readonly OUTBOUND_WHISPER: "OUTBOUND_WHISPER";
  readonly QUEUE_TRANSFER: "QUEUE_TRANSFER";
};
export type ContactFlowType =
  (typeof ContactFlowType)[keyof typeof ContactFlowType];
export interface CreateContactFlowRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Type: ContactFlowType | undefined;
  Description?: string;
  Content: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateContactFlowResponse {
  ContactFlowId?: string;
  ContactFlowArn?: string;
}
export interface ProblemDetail {
  message?: string;
}
export declare class InvalidContactFlowException extends __BaseException {
  readonly name: "InvalidContactFlowException";
  readonly $fault: "client";
  problems?: ProblemDetail[];
  constructor(
    opts: __ExceptionOptionType<InvalidContactFlowException, __BaseException>
  );
}
export interface CreateContactFlowModuleRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  Content: string | undefined;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export interface CreateContactFlowModuleResponse {
  Id?: string;
  Arn?: string;
}
export declare class InvalidContactFlowModuleException extends __BaseException {
  readonly name: "InvalidContactFlowModuleException";
  readonly $fault: "client";
  Problems?: ProblemDetail[];
  constructor(
    opts: __ExceptionOptionType<
      InvalidContactFlowModuleException,
      __BaseException
    >
  );
}
export declare const EvaluationFormQuestionType: {
  readonly NUMERIC: "NUMERIC";
  readonly SINGLESELECT: "SINGLESELECT";
  readonly TEXT: "TEXT";
};
export type EvaluationFormQuestionType =
  (typeof EvaluationFormQuestionType)[keyof typeof EvaluationFormQuestionType];
export declare const NumericQuestionPropertyAutomationLabel: {
  readonly AGENT_INTERACTION_DURATION: "AGENT_INTERACTION_DURATION";
  readonly CONTACT_DURATION: "CONTACT_DURATION";
  readonly CUSTOMER_HOLD_TIME: "CUSTOMER_HOLD_TIME";
  readonly NON_TALK_TIME: "NON_TALK_TIME";
  readonly NON_TALK_TIME_PERCENTAGE: "NON_TALK_TIME_PERCENTAGE";
  readonly NUMBER_OF_INTERRUPTIONS: "NUMBER_OF_INTERRUPTIONS";
  readonly OVERALL_AGENT_SENTIMENT_SCORE: "OVERALL_AGENT_SENTIMENT_SCORE";
  readonly OVERALL_CUSTOMER_SENTIMENT_SCORE: "OVERALL_CUSTOMER_SENTIMENT_SCORE";
};
export type NumericQuestionPropertyAutomationLabel =
  (typeof NumericQuestionPropertyAutomationLabel)[keyof typeof NumericQuestionPropertyAutomationLabel];
export interface NumericQuestionPropertyValueAutomation {
  Label: NumericQuestionPropertyAutomationLabel | undefined;
}
export type EvaluationFormNumericQuestionAutomation =
  | EvaluationFormNumericQuestionAutomation.PropertyValueMember
  | EvaluationFormNumericQuestionAutomation.$UnknownMember;
export declare namespace EvaluationFormNumericQuestionAutomation {
  interface PropertyValueMember {
    PropertyValue: NumericQuestionPropertyValueAutomation;
    $unknown?: never;
  }
  interface $UnknownMember {
    PropertyValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PropertyValue: (value: NumericQuestionPropertyValueAutomation) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: EvaluationFormNumericQuestionAutomation,
    visitor: Visitor<T>
  ) => T;
}
export interface EvaluationFormNumericQuestionOption {
  MinValue: number | undefined;
  MaxValue: number | undefined;
  Score?: number;
  AutomaticFail?: boolean;
}
export interface EvaluationFormNumericQuestionProperties {
  MinValue: number | undefined;
  MaxValue: number | undefined;
  Options?: EvaluationFormNumericQuestionOption[];
  Automation?: EvaluationFormNumericQuestionAutomation;
}
export declare const SingleSelectQuestionRuleCategoryAutomationCondition: {
  readonly NOT_PRESENT: "NOT_PRESENT";
  readonly PRESENT: "PRESENT";
};
export type SingleSelectQuestionRuleCategoryAutomationCondition =
  (typeof SingleSelectQuestionRuleCategoryAutomationCondition)[keyof typeof SingleSelectQuestionRuleCategoryAutomationCondition];
export interface SingleSelectQuestionRuleCategoryAutomation {
  Category: string | undefined;
  Condition: SingleSelectQuestionRuleCategoryAutomationCondition | undefined;
  OptionRefId: string | undefined;
}
export type EvaluationFormSingleSelectQuestionAutomationOption =
  | EvaluationFormSingleSelectQuestionAutomationOption.RuleCategoryMember
  | EvaluationFormSingleSelectQuestionAutomationOption.$UnknownMember;
export declare namespace EvaluationFormSingleSelectQuestionAutomationOption {
  interface RuleCategoryMember {
    RuleCategory: SingleSelectQuestionRuleCategoryAutomation;
    $unknown?: never;
  }
  interface $UnknownMember {
    RuleCategory?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    RuleCategory: (value: SingleSelectQuestionRuleCategoryAutomation) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: EvaluationFormSingleSelectQuestionAutomationOption,
    visitor: Visitor<T>
  ) => T;
}
export interface EvaluationFormSingleSelectQuestionAutomation {
  Options: EvaluationFormSingleSelectQuestionAutomationOption[] | undefined;
  DefaultOptionRefId?: string;
}
export declare const EvaluationFormSingleSelectQuestionDisplayMode: {
  readonly DROPDOWN: "DROPDOWN";
  readonly RADIO: "RADIO";
};
export type EvaluationFormSingleSelectQuestionDisplayMode =
  (typeof EvaluationFormSingleSelectQuestionDisplayMode)[keyof typeof EvaluationFormSingleSelectQuestionDisplayMode];
export interface EvaluationFormSingleSelectQuestionOption {
  RefId: string | undefined;
  Text: string | undefined;
  Score?: number;
  AutomaticFail?: boolean;
}
export interface EvaluationFormSingleSelectQuestionProperties {
  Options: EvaluationFormSingleSelectQuestionOption[] | undefined;
  DisplayAs?: EvaluationFormSingleSelectQuestionDisplayMode;
  Automation?: EvaluationFormSingleSelectQuestionAutomation;
}
export type EvaluationFormQuestionTypeProperties =
  | EvaluationFormQuestionTypeProperties.NumericMember
  | EvaluationFormQuestionTypeProperties.SingleSelectMember
  | EvaluationFormQuestionTypeProperties.$UnknownMember;
export declare namespace EvaluationFormQuestionTypeProperties {
  interface NumericMember {
    Numeric: EvaluationFormNumericQuestionProperties;
    SingleSelect?: never;
    $unknown?: never;
  }
  interface SingleSelectMember {
    Numeric?: never;
    SingleSelect: EvaluationFormSingleSelectQuestionProperties;
    $unknown?: never;
  }
  interface $UnknownMember {
    Numeric?: never;
    SingleSelect?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    Numeric: (value: EvaluationFormNumericQuestionProperties) => T;
    SingleSelect: (value: EvaluationFormSingleSelectQuestionProperties) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: EvaluationFormQuestionTypeProperties,
    visitor: Visitor<T>
  ) => T;
}
export interface EvaluationFormQuestion {
  Title: string | undefined;
  Instructions?: string;
  RefId: string | undefined;
  NotApplicableEnabled?: boolean;
  QuestionType: EvaluationFormQuestionType | undefined;
  QuestionTypeProperties?: EvaluationFormQuestionTypeProperties;
  Weight?: number;
}
export declare const EvaluationFormScoringMode: {
  readonly QUESTION_ONLY: "QUESTION_ONLY";
  readonly SECTION_ONLY: "SECTION_ONLY";
};
export type EvaluationFormScoringMode =
  (typeof EvaluationFormScoringMode)[keyof typeof EvaluationFormScoringMode];
export declare const EvaluationFormScoringStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type EvaluationFormScoringStatus =
  (typeof EvaluationFormScoringStatus)[keyof typeof EvaluationFormScoringStatus];
export interface EvaluationFormScoringStrategy {
  Mode: EvaluationFormScoringMode | undefined;
  Status: EvaluationFormScoringStatus | undefined;
}
export interface CreateEvaluationFormResponse {
  EvaluationFormId: string | undefined;
  EvaluationFormArn: string | undefined;
}
export declare const HoursOfOperationDays: {
  readonly FRIDAY: "FRIDAY";
  readonly MONDAY: "MONDAY";
  readonly SATURDAY: "SATURDAY";
  readonly SUNDAY: "SUNDAY";
  readonly THURSDAY: "THURSDAY";
  readonly TUESDAY: "TUESDAY";
  readonly WEDNESDAY: "WEDNESDAY";
};
export type HoursOfOperationDays =
  (typeof HoursOfOperationDays)[keyof typeof HoursOfOperationDays];
export interface HoursOfOperationTimeSlice {
  Hours: number | undefined;
  Minutes: number | undefined;
}
export interface HoursOfOperationConfig {
  Day: HoursOfOperationDays | undefined;
  StartTime: HoursOfOperationTimeSlice | undefined;
  EndTime: HoursOfOperationTimeSlice | undefined;
}
export interface CreateHoursOfOperationRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  TimeZone: string | undefined;
  Config: HoursOfOperationConfig[] | undefined;
  Tags?: Record<string, string>;
}
export interface CreateHoursOfOperationResponse {
  HoursOfOperationId?: string;
  HoursOfOperationArn?: string;
}
export declare const DirectoryType: {
  readonly CONNECT_MANAGED: "CONNECT_MANAGED";
  readonly EXISTING_DIRECTORY: "EXISTING_DIRECTORY";
  readonly SAML: "SAML";
};
export type DirectoryType = (typeof DirectoryType)[keyof typeof DirectoryType];
export interface CreateInstanceRequest {
  ClientToken?: string;
  IdentityManagementType: DirectoryType | undefined;
  InstanceAlias?: string;
  DirectoryId?: string;
  InboundCallsEnabled: boolean | undefined;
  OutboundCallsEnabled: boolean | undefined;
  Tags?: Record<string, string>;
}
export interface CreateInstanceResponse {
  Id?: string;
  Arn?: string;
}
export declare const IntegrationType: {
  readonly APPLICATION: "APPLICATION";
  readonly CASES_DOMAIN: "CASES_DOMAIN";
  readonly EVENT: "EVENT";
  readonly FILE_SCANNER: "FILE_SCANNER";
  readonly PINPOINT_APP: "PINPOINT_APP";
  readonly VOICE_ID: "VOICE_ID";
  readonly WISDOM_ASSISTANT: "WISDOM_ASSISTANT";
  readonly WISDOM_KNOWLEDGE_BASE: "WISDOM_KNOWLEDGE_BASE";
  readonly WISDOM_QUICK_RESPONSES: "WISDOM_QUICK_RESPONSES";
};
export type IntegrationType =
  (typeof IntegrationType)[keyof typeof IntegrationType];
export declare const SourceType: {
  readonly CASES: "CASES";
  readonly SALESFORCE: "SALESFORCE";
  readonly ZENDESK: "ZENDESK";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface CreateIntegrationAssociationRequest {
  InstanceId: string | undefined;
  IntegrationType: IntegrationType | undefined;
  IntegrationArn: string | undefined;
  SourceApplicationUrl?: string;
  SourceApplicationName?: string;
  SourceType?: SourceType;
  Tags?: Record<string, string>;
}
export interface CreateIntegrationAssociationResponse {
  IntegrationAssociationId?: string;
  IntegrationAssociationArn?: string;
}
export declare const ParticipantRole: {
  readonly AGENT: "AGENT";
  readonly CUSTOMER: "CUSTOMER";
  readonly CUSTOM_BOT: "CUSTOM_BOT";
  readonly SUPERVISOR: "SUPERVISOR";
  readonly SYSTEM: "SYSTEM";
};
export type ParticipantRole =
  (typeof ParticipantRole)[keyof typeof ParticipantRole];
export interface ParticipantDetailsToAdd {
  ParticipantRole?: ParticipantRole;
  DisplayName?: string;
}
export interface CreateParticipantRequest {
  InstanceId: string | undefined;
  ContactId: string | undefined;
  ClientToken?: string;
  ParticipantDetails: ParticipantDetailsToAdd | undefined;
}
export interface ParticipantTokenCredentials {
  ParticipantToken?: string;
  Expiry?: string;
}
export interface CreateParticipantResponse {
  ParticipantCredentials?: ParticipantTokenCredentials;
  ParticipantId?: string;
}
export declare const RehydrationType: {
  readonly ENTIRE_PAST_SESSION: "ENTIRE_PAST_SESSION";
  readonly FROM_SEGMENT: "FROM_SEGMENT";
};
export type RehydrationType =
  (typeof RehydrationType)[keyof typeof RehydrationType];
export interface CreatePersistentContactAssociationRequest {
  InstanceId: string | undefined;
  InitialContactId: string | undefined;
  RehydrationType: RehydrationType | undefined;
  SourceContactId: string | undefined;
  ClientToken?: string;
}
export interface CreatePersistentContactAssociationResponse {
  ContinuedFromContactId?: string;
}
export type PredefinedAttributeValues =
  | PredefinedAttributeValues.StringListMember
  | PredefinedAttributeValues.$UnknownMember;
export declare namespace PredefinedAttributeValues {
  interface StringListMember {
    StringList: string[];
    $unknown?: never;
  }
  interface $UnknownMember {
    StringList?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    StringList: (value: string[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: PredefinedAttributeValues, visitor: Visitor<T>) => T;
}
export interface CreatePredefinedAttributeRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Values: PredefinedAttributeValues | undefined;
}
export interface CreatePromptRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  S3Uri: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreatePromptResponse {
  PromptARN?: string;
  PromptId?: string;
}
export interface OutboundCallerConfig {
  OutboundCallerIdName?: string;
  OutboundCallerIdNumberId?: string;
  OutboundFlowId?: string;
}
export interface CreateQueueRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  OutboundCallerConfig?: OutboundCallerConfig;
  HoursOfOperationId: string | undefined;
  MaxContacts?: number;
  QuickConnectIds?: string[];
  Tags?: Record<string, string>;
}
export interface CreateQueueResponse {
  QueueArn?: string;
  QueueId?: string;
}
export interface PhoneNumberQuickConnectConfig {
  PhoneNumber: string | undefined;
}
export interface QueueQuickConnectConfig {
  QueueId: string | undefined;
  ContactFlowId: string | undefined;
}
export declare const QuickConnectType: {
  readonly PHONE_NUMBER: "PHONE_NUMBER";
  readonly QUEUE: "QUEUE";
  readonly USER: "USER";
};
export type QuickConnectType =
  (typeof QuickConnectType)[keyof typeof QuickConnectType];
export interface UserQuickConnectConfig {
  UserId: string | undefined;
  ContactFlowId: string | undefined;
}
export interface QuickConnectConfig {
  QuickConnectType: QuickConnectType | undefined;
  UserConfig?: UserQuickConnectConfig;
  QueueConfig?: QueueQuickConnectConfig;
  PhoneConfig?: PhoneNumberQuickConnectConfig;
}
export interface CreateQuickConnectRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  QuickConnectConfig: QuickConnectConfig | undefined;
  Tags?: Record<string, string>;
}
export interface CreateQuickConnectResponse {
  QuickConnectARN?: string;
  QuickConnectId?: string;
}
export declare const BehaviorType: {
  readonly ROUTE_ANY_CHANNEL: "ROUTE_ANY_CHANNEL";
  readonly ROUTE_CURRENT_CHANNEL_ONLY: "ROUTE_CURRENT_CHANNEL_ONLY";
};
export type BehaviorType = (typeof BehaviorType)[keyof typeof BehaviorType];
export interface CrossChannelBehavior {
  BehaviorType: BehaviorType | undefined;
}
export interface MediaConcurrency {
  Channel: Channel | undefined;
  Concurrency: number | undefined;
  CrossChannelBehavior?: CrossChannelBehavior;
}
export interface CreateRoutingProfileRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description: string | undefined;
  DefaultOutboundQueueId: string | undefined;
  QueueConfigs?: RoutingProfileQueueConfig[];
  MediaConcurrencies: MediaConcurrency[] | undefined;
  Tags?: Record<string, string>;
  AgentAvailabilityTimer?: AgentAvailabilityTimer;
}
export interface CreateRoutingProfileResponse {
  RoutingProfileArn?: string;
  RoutingProfileId?: string;
}
export interface AssignContactCategoryActionDefinition {}
export interface EmptyFieldValue {}
export interface FieldValueUnion {
  BooleanValue?: boolean;
  DoubleValue?: number;
  EmptyValue?: EmptyFieldValue;
  StringValue?: string;
}
export interface FieldValue {
  Id: string | undefined;
  Value: FieldValueUnion | undefined;
}
export interface CreateCaseActionDefinition {
  Fields: FieldValue[] | undefined;
  TemplateId: string | undefined;
}
export interface EndAssociatedTasksActionDefinition {}
export interface EventBridgeActionDefinition {
  Name: string | undefined;
}
export declare const NotificationContentType: {
  readonly PLAIN_TEXT: "PLAIN_TEXT";
};
export type NotificationContentType =
  (typeof NotificationContentType)[keyof typeof NotificationContentType];
export declare const NotificationDeliveryType: {
  readonly EMAIL: "EMAIL";
};
export type NotificationDeliveryType =
  (typeof NotificationDeliveryType)[keyof typeof NotificationDeliveryType];
export interface NotificationRecipientType {
  UserTags?: Record<string, string>;
  UserIds?: string[];
}
export interface SendNotificationActionDefinition {
  DeliveryMethod: NotificationDeliveryType | undefined;
  Subject?: string;
  Content: string | undefined;
  ContentType: NotificationContentType | undefined;
  Recipient: NotificationRecipientType | undefined;
}
export interface SubmitAutoEvaluationActionDefinition {
  EvaluationFormId: string | undefined;
}
export declare const ReferenceType: {
  readonly ATTACHMENT: "ATTACHMENT";
  readonly DATE: "DATE";
  readonly EMAIL: "EMAIL";
  readonly NUMBER: "NUMBER";
  readonly STRING: "STRING";
  readonly URL: "URL";
};
export type ReferenceType = (typeof ReferenceType)[keyof typeof ReferenceType];
export interface Reference {
  Value: string | undefined;
  Type: ReferenceType | undefined;
}
export interface TaskActionDefinition {
  Name: string | undefined;
  Description?: string;
  ContactFlowId: string | undefined;
  References?: Record<string, Reference>;
}
export interface UpdateCaseActionDefinition {
  Fields: FieldValue[] | undefined;
}
export interface RuleAction {
  ActionType: ActionType | undefined;
  TaskAction?: TaskActionDefinition;
  EventBridgeAction?: EventBridgeActionDefinition;
  AssignContactCategoryAction?: AssignContactCategoryActionDefinition;
  SendNotificationAction?: SendNotificationActionDefinition;
  CreateCaseAction?: CreateCaseActionDefinition;
  UpdateCaseAction?: UpdateCaseActionDefinition;
  EndAssociatedTasksAction?: EndAssociatedTasksActionDefinition;
  SubmitAutoEvaluationAction?: SubmitAutoEvaluationActionDefinition;
}
export declare const RulePublishStatus: {
  readonly DRAFT: "DRAFT";
  readonly PUBLISHED: "PUBLISHED";
};
export type RulePublishStatus =
  (typeof RulePublishStatus)[keyof typeof RulePublishStatus];
export declare const EventSourceName: {
  readonly OnCaseCreate: "OnCaseCreate";
  readonly OnCaseUpdate: "OnCaseUpdate";
  readonly OnContactEvaluationSubmit: "OnContactEvaluationSubmit";
  readonly OnMetricDataUpdate: "OnMetricDataUpdate";
  readonly OnPostCallAnalysisAvailable: "OnPostCallAnalysisAvailable";
  readonly OnPostChatAnalysisAvailable: "OnPostChatAnalysisAvailable";
  readonly OnRealTimeCallAnalysisAvailable: "OnRealTimeCallAnalysisAvailable";
  readonly OnRealTimeChatAnalysisAvailable: "OnRealTimeChatAnalysisAvailable";
  readonly OnSalesforceCaseCreate: "OnSalesforceCaseCreate";
  readonly OnZendeskTicketCreate: "OnZendeskTicketCreate";
  readonly OnZendeskTicketStatusUpdate: "OnZendeskTicketStatusUpdate";
};
export type EventSourceName =
  (typeof EventSourceName)[keyof typeof EventSourceName];
export interface RuleTriggerEventSource {
  EventSourceName: EventSourceName | undefined;
  IntegrationAssociationId?: string;
}
export interface CreateRuleRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  TriggerEventSource: RuleTriggerEventSource | undefined;
  Function: string | undefined;
  Actions: RuleAction[] | undefined;
  PublishStatus: RulePublishStatus | undefined;
  ClientToken?: string;
}
export interface CreateRuleResponse {
  RuleArn: string | undefined;
  RuleId: string | undefined;
}
export interface Application {
  Namespace?: string;
  ApplicationPermissions?: string[];
}
export interface CreateSecurityProfileRequest {
  SecurityProfileName: string | undefined;
  Description?: string;
  Permissions?: string[];
  InstanceId: string | undefined;
  Tags?: Record<string, string>;
  AllowedAccessControlTags?: Record<string, string>;
  TagRestrictedResources?: string[];
  Applications?: Application[];
  HierarchyRestrictedResources?: string[];
  AllowedAccessControlHierarchyGroupId?: string;
}
export interface CreateSecurityProfileResponse {
  SecurityProfileId?: string;
  SecurityProfileArn?: string;
}
export interface TaskTemplateFieldIdentifier {
  Name?: string;
}
export interface InvisibleFieldInfo {
  Id?: TaskTemplateFieldIdentifier;
}
export interface ReadOnlyFieldInfo {
  Id?: TaskTemplateFieldIdentifier;
}
export interface RequiredFieldInfo {
  Id?: TaskTemplateFieldIdentifier;
}
export interface TaskTemplateConstraints {
  RequiredFields?: RequiredFieldInfo[];
  ReadOnlyFields?: ReadOnlyFieldInfo[];
  InvisibleFields?: InvisibleFieldInfo[];
}
export interface TaskTemplateDefaultFieldValue {
  Id?: TaskTemplateFieldIdentifier;
  DefaultValue?: string;
}
export interface TaskTemplateDefaults {
  DefaultFieldValues?: TaskTemplateDefaultFieldValue[];
}
export declare const TaskTemplateFieldType: {
  readonly BOOLEAN: "BOOLEAN";
  readonly DATE_TIME: "DATE_TIME";
  readonly DESCRIPTION: "DESCRIPTION";
  readonly EMAIL: "EMAIL";
  readonly NAME: "NAME";
  readonly NUMBER: "NUMBER";
  readonly QUICK_CONNECT: "QUICK_CONNECT";
  readonly SCHEDULED_TIME: "SCHEDULED_TIME";
  readonly SINGLE_SELECT: "SINGLE_SELECT";
  readonly TEXT: "TEXT";
  readonly TEXT_AREA: "TEXT_AREA";
  readonly URL: "URL";
};
export type TaskTemplateFieldType =
  (typeof TaskTemplateFieldType)[keyof typeof TaskTemplateFieldType];
export interface TaskTemplateField {
  Id: TaskTemplateFieldIdentifier | undefined;
  Description?: string;
  Type?: TaskTemplateFieldType;
  SingleSelectOptions?: string[];
}
export declare const TaskTemplateStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type TaskTemplateStatus =
  (typeof TaskTemplateStatus)[keyof typeof TaskTemplateStatus];
export interface CreateTaskTemplateRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
  Description?: string;
  ContactFlowId?: string;
  Constraints?: TaskTemplateConstraints;
  Defaults?: TaskTemplateDefaults;
  Status?: TaskTemplateStatus;
  Fields: TaskTemplateField[] | undefined;
  ClientToken?: string;
}
export interface CreateTaskTemplateResponse {
  Id: string | undefined;
  Arn: string | undefined;
}
export declare const PropertyValidationExceptionReason: {
  readonly INVALID_FORMAT: "INVALID_FORMAT";
  readonly NOT_SUPPORTED: "NOT_SUPPORTED";
  readonly REFERENCED_RESOURCE_NOT_FOUND: "REFERENCED_RESOURCE_NOT_FOUND";
  readonly REQUIRED_PROPERTY_MISSING: "REQUIRED_PROPERTY_MISSING";
  readonly RESOURCE_NAME_ALREADY_EXISTS: "RESOURCE_NAME_ALREADY_EXISTS";
  readonly UNIQUE_CONSTRAINT_VIOLATED: "UNIQUE_CONSTRAINT_VIOLATED";
};
export type PropertyValidationExceptionReason =
  (typeof PropertyValidationExceptionReason)[keyof typeof PropertyValidationExceptionReason];
export interface PropertyValidationExceptionProperty {
  PropertyPath: string | undefined;
  Reason: PropertyValidationExceptionReason | undefined;
  Message: string | undefined;
}
export declare class PropertyValidationException extends __BaseException {
  readonly name: "PropertyValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  PropertyList?: PropertyValidationExceptionProperty[];
  constructor(
    opts: __ExceptionOptionType<PropertyValidationException, __BaseException>
  );
}
export interface CreateTrafficDistributionGroupRequest {
  Name: string | undefined;
  Description?: string;
  InstanceId: string | undefined;
  ClientToken?: string;
  Tags?: Record<string, string>;
}
export interface CreateTrafficDistributionGroupResponse {
  Id?: string;
  Arn?: string;
}
export declare class ResourceNotReadyException extends __BaseException {
  readonly name: "ResourceNotReadyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotReadyException, __BaseException>
  );
}
export declare const UseCaseType: {
  readonly CONNECT_CAMPAIGNS: "CONNECT_CAMPAIGNS";
  readonly RULES_EVALUATION: "RULES_EVALUATION";
};
export type UseCaseType = (typeof UseCaseType)[keyof typeof UseCaseType];
export interface CreateUseCaseRequest {
  InstanceId: string | undefined;
  IntegrationAssociationId: string | undefined;
  UseCaseType: UseCaseType | undefined;
  Tags?: Record<string, string>;
}
export interface CreateUseCaseResponse {
  UseCaseId?: string;
  UseCaseArn?: string;
}
export interface UserIdentityInfo {
  FirstName?: string;
  LastName?: string;
  Email?: string;
  SecondaryEmail?: string;
  Mobile?: string;
}
export declare const PhoneType: {
  readonly DESK_PHONE: "DESK_PHONE";
  readonly SOFT_PHONE: "SOFT_PHONE";
};
export type PhoneType = (typeof PhoneType)[keyof typeof PhoneType];
export interface UserPhoneConfig {
  PhoneType: PhoneType | undefined;
  AutoAccept?: boolean;
  AfterContactWorkTimeLimit?: number;
  DeskPhoneNumber?: string;
}
export interface CreateUserRequest {
  Username: string | undefined;
  Password?: string;
  IdentityInfo?: UserIdentityInfo;
  PhoneConfig: UserPhoneConfig | undefined;
  DirectoryUserId?: string;
  SecurityProfileIds: string[] | undefined;
  RoutingProfileId: string | undefined;
  HierarchyGroupId?: string;
  InstanceId: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateUserResponse {
  UserId?: string;
  UserArn?: string;
}
export interface CreateUserHierarchyGroupRequest {
  Name: string | undefined;
  ParentGroupId?: string;
  InstanceId: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateUserHierarchyGroupResponse {
  HierarchyGroupId?: string;
  HierarchyGroupArn?: string;
}
export interface ViewInputContent {
  Template?: string;
  Actions?: string[];
}
export declare const ViewStatus: {
  readonly PUBLISHED: "PUBLISHED";
  readonly SAVED: "SAVED";
};
export type ViewStatus = (typeof ViewStatus)[keyof typeof ViewStatus];
export interface CreateViewRequest {
  InstanceId: string | undefined;
  ClientToken?: string;
  Status: ViewStatus | undefined;
  Content: ViewInputContent | undefined;
  Description?: string;
  Name: string | undefined;
  Tags?: Record<string, string>;
}
export interface ViewContent {
  InputSchema?: string;
  Template?: string;
  Actions?: string[];
}
export declare const ViewType: {
  readonly AWS_MANAGED: "AWS_MANAGED";
  readonly CUSTOMER_MANAGED: "CUSTOMER_MANAGED";
};
export type ViewType = (typeof ViewType)[keyof typeof ViewType];
export interface View {
  Id?: string;
  Arn?: string;
  Name?: string;
  Status?: ViewStatus;
  Type?: ViewType;
  Description?: string;
  Version?: number;
  VersionDescription?: string;
  Content?: ViewContent;
  Tags?: Record<string, string>;
  CreatedTime?: Date;
  LastModifiedTime?: Date;
  ViewContentSha256?: string;
}
export interface CreateViewResponse {
  View?: View;
}
export declare const ResourceType: {
  readonly CONTACT: "CONTACT";
  readonly CONTACT_FLOW: "CONTACT_FLOW";
  readonly HIERARCHY_GROUP: "HIERARCHY_GROUP";
  readonly HIERARCHY_LEVEL: "HIERARCHY_LEVEL";
  readonly INSTANCE: "INSTANCE";
  readonly PARTICIPANT: "PARTICIPANT";
  readonly PHONE_NUMBER: "PHONE_NUMBER";
  readonly USER: "USER";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: ResourceType;
  ResourceId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface CreateViewVersionRequest {
  InstanceId: string | undefined;
  ViewId: string | undefined;
  VersionDescription?: string;
  ViewContentSha256?: string;
}
export interface CreateViewVersionResponse {
  View?: View;
}
export interface CreateVocabularyRequest {
  ClientToken?: string;
  InstanceId: string | undefined;
  VocabularyName: string | undefined;
  LanguageCode: VocabularyLanguageCode | undefined;
  Content: string | undefined;
  Tags?: Record<string, string>;
}
export declare const VocabularyState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
};
export type VocabularyState =
  (typeof VocabularyState)[keyof typeof VocabularyState];
export interface CreateVocabularyResponse {
  VocabularyArn: string | undefined;
  VocabularyId: string | undefined;
  State: VocabularyState | undefined;
}
export interface DeactivateEvaluationFormRequest {
  InstanceId: string | undefined;
  EvaluationFormId: string | undefined;
  EvaluationFormVersion: number | undefined;
}
export interface DeactivateEvaluationFormResponse {
  EvaluationFormId: string | undefined;
  EvaluationFormArn: string | undefined;
  EvaluationFormVersion: number | undefined;
}
export interface DeleteContactEvaluationRequest {
  InstanceId: string | undefined;
  EvaluationId: string | undefined;
}
export interface DeleteContactFlowRequest {
  InstanceId: string | undefined;
  ContactFlowId: string | undefined;
}
export interface DeleteContactFlowResponse {}
export interface DeleteContactFlowModuleRequest {
  InstanceId: string | undefined;
  ContactFlowModuleId: string | undefined;
}
export interface DeleteContactFlowModuleResponse {}
export interface DeleteEvaluationFormRequest {
  InstanceId: string | undefined;
  EvaluationFormId: string | undefined;
  EvaluationFormVersion?: number;
}
export interface DeleteHoursOfOperationRequest {
  InstanceId: string | undefined;
  HoursOfOperationId: string | undefined;
}
export interface DeleteInstanceRequest {
  InstanceId: string | undefined;
}
export interface DeleteIntegrationAssociationRequest {
  InstanceId: string | undefined;
  IntegrationAssociationId: string | undefined;
}
export interface DeletePredefinedAttributeRequest {
  InstanceId: string | undefined;
  Name: string | undefined;
}
export interface DeletePromptRequest {
  InstanceId: string | undefined;
  PromptId: string | undefined;
}
export interface DeleteQueueRequest {
  InstanceId: string | undefined;
  QueueId: string | undefined;
}
export interface DeleteQuickConnectRequest {
  InstanceId: string | undefined;
  QuickConnectId: string | undefined;
}
export interface DeleteRoutingProfileRequest {
  InstanceId: string | undefined;
  RoutingProfileId: string | undefined;
}
export interface DeleteRuleRequest {
  InstanceId: string | undefined;
  RuleId: string | undefined;
}
export interface DeleteSecurityProfileRequest {
  InstanceId: string | undefined;
  SecurityProfileId: string | undefined;
}
export interface DeleteTaskTemplateRequest {
  InstanceId: string | undefined;
  TaskTemplateId: string | undefined;
}
export interface DeleteTaskTemplateResponse {}
export interface DeleteTrafficDistributionGroupRequest {
  TrafficDistributionGroupId: string | undefined;
}
export interface DeleteTrafficDistributionGroupResponse {}
export interface DeleteUseCaseRequest {
  InstanceId: string | undefined;
  IntegrationAssociationId: string | undefined;
  UseCaseId: string | undefined;
}
export interface DeleteUserRequest {
  InstanceId: string | undefined;
  UserId: string | undefined;
}
export interface DeleteUserHierarchyGroupRequest {
  HierarchyGroupId: string | undefined;
  InstanceId: string | undefined;
}
export interface DeleteViewRequest {
  InstanceId: string | undefined;
  ViewId: string | undefined;
}
export interface DeleteViewResponse {}
export interface DeleteViewVersionRequest {
  InstanceId: string | undefined;
  ViewId: string | undefined;
  ViewVersion: number | undefined;
}
export interface DeleteViewVersionResponse {}
export interface DeleteVocabularyRequest {
  InstanceId: string | undefined;
  VocabularyId: string | undefined;
}
export interface DeleteVocabularyResponse {
  VocabularyArn: string | undefined;
  VocabularyId: string | undefined;
  State: VocabularyState | undefined;
}
export interface DescribeAgentStatusRequest {
  InstanceId: string | undefined;
  AgentStatusId: string | undefined;
}
export interface DescribeAgentStatusResponse {
  AgentStatus?: AgentStatus;
}
export interface DescribeContactRequest {
  InstanceId: string | undefined;
  ContactId: string | undefined;
}
export interface QueueInfo {
  Id?: string;
  EnqueueTimestamp?: Date;
}
export interface WisdomInfo {
  SessionArn?: string;
}
export interface Contact {
  Arn?: string;
  Id?: string;
  InitialContactId?: string;
  PreviousContactId?: string;
  InitiationMethod?: ContactInitiationMethod;
  Name?: string;
  Description?: string;
  Channel?: Channel;
  QueueInfo?: QueueInfo;
  AgentInfo?: AgentInfo;
  InitiationTimestamp?: Date;
  DisconnectTimestamp?: Date;
  LastUpdateTimestamp?: Date;
  LastPausedTimestamp?: Date;
  LastResumedTimestamp?: Date;
  TotalPauseCount?: number;
  TotalPauseDurationInSeconds?: number;
  ScheduledTimestamp?: Date;
  RelatedContactId?: string;
  WisdomInfo?: WisdomInfo;
  QueueTimeAdjustmentSeconds?: number;
  QueuePriority?: number;
  Tags?: Record<string, string>;
}
export interface DescribeContactResponse {
  Contact?: Contact;
}
export interface DescribeContactEvaluationRequest {
  InstanceId: string | undefined;
  EvaluationId: string | undefined;
}
export type EvaluationAnswerData =
  | EvaluationAnswerData.NotApplicableMember
  | EvaluationAnswerData.NumericValueMember
  | EvaluationAnswerData.StringValueMember
  | EvaluationAnswerData.$UnknownMember;
export declare namespace EvaluationAnswerData {
  interface StringValueMember {
    StringValue: string;
    NumericValue?: never;
    NotApplicable?: never;
    $unknown?: never;
  }
  interface NumericValueMember {
    StringValue?: never;
    NumericValue: number;
    NotApplicable?: never;
    $unknown?: never;
  }
  interface NotApplicableMember {
    StringValue?: never;
    NumericValue?: never;
    NotApplicable: boolean;
    $unknown?: never;
  }
  interface $UnknownMember {
    StringValue?: never;
    NumericValue?: never;
    NotApplicable?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    StringValue: (value: string) => T;
    NumericValue: (value: number) => T;
    NotApplicable: (value: boolean) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: EvaluationAnswerData, visitor: Visitor<T>) => T;
}
export interface EvaluationAnswerOutput {
  Value?: EvaluationAnswerData;
  SystemSuggestedValue?: EvaluationAnswerData;
}
export interface EvaluationScore {
  Percentage?: number;
  NotApplicable?: boolean;
  AutomaticFail?: boolean;
}
export interface EvaluationMetadata {
  ContactId: string | undefined;
  EvaluatorArn: string | undefined;
  ContactAgentId?: string;
  Score?: EvaluationScore;
}
export interface EvaluationNote {
  Value?: string;
}
export declare const EvaluationStatus: {
  readonly DRAFT: "DRAFT";
  readonly SUBMITTED: "SUBMITTED";
};
export type EvaluationStatus =
  (typeof EvaluationStatus)[keyof typeof EvaluationStatus];
export interface Evaluation {
  EvaluationId: string | undefined;
  EvaluationArn: string | undefined;
  Metadata: EvaluationMetadata | undefined;
  Answers: Record<string, EvaluationAnswerOutput> | undefined;
  Notes: Record<string, EvaluationNote> | undefined;
  Status: EvaluationStatus | undefined;
  Scores?: Record<string, EvaluationScore>;
  CreatedTime: Date | undefined;
  LastModifiedTime: Date | undefined;
  Tags?: Record<string, string>;
}
export declare class ContactFlowNotPublishedException extends __BaseException {
  readonly name: "ContactFlowNotPublishedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ContactFlowNotPublishedException,
      __BaseException
    >
  );
}
export interface DescribeContactFlowRequest {
  InstanceId: string | undefined;
  ContactFlowId: string | undefined;
}
export declare const ContactFlowState: {
  readonly ACTIVE: "ACTIVE";
  readonly ARCHIVED: "ARCHIVED";
};
export type ContactFlowState =
  (typeof ContactFlowState)[keyof typeof ContactFlowState];
export interface ContactFlow {
  Arn?: string;
  Id?: string;
  Name?: string;
  Type?: ContactFlowType;
  State?: ContactFlowState;
  Description?: string;
  Content?: string;
  Tags?: Record<string, string>;
}
export interface DescribeContactFlowResponse {
  ContactFlow?: ContactFlow;
}
export interface DescribeContactFlowModuleRequest {
  InstanceId: string | undefined;
  ContactFlowModuleId: string | undefined;
}
export declare const ContactFlowModuleState: {
  readonly ACTIVE: "ACTIVE";
  readonly ARCHIVED: "ARCHIVED";
};
export type ContactFlowModuleState =
  (typeof ContactFlowModuleState)[keyof typeof ContactFlowModuleState];
export declare const ContactFlowModuleStatus: {
  readonly PUBLISHED: "PUBLISHED";
  readonly SAVED: "SAVED";
};
export type ContactFlowModuleStatus =
  (typeof ContactFlowModuleStatus)[keyof typeof ContactFlowModuleStatus];
export interface ContactFlowModule {
  Arn?: string;
  Id?: string;
  Name?: string;
  Content?: string;
  Description?: string;
  State?: ContactFlowModuleState;
  Status?: ContactFlowModuleStatus;
  Tags?: Record<string, string>;
}
export interface DescribeContactFlowModuleResponse {
  ContactFlowModule?: ContactFlowModule;
}
export interface DescribeEvaluationFormRequest {
  InstanceId: string | undefined;
  EvaluationFormId: string | undefined;
  EvaluationFormVersion?: number;
}
export declare const EvaluationFormVersionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DRAFT: "DRAFT";
};
export type EvaluationFormVersionStatus =
  (typeof EvaluationFormVersionStatus)[keyof typeof EvaluationFormVersionStatus];
export interface DescribeHoursOfOperationRequest {
  InstanceId: string | undefined;
  HoursOfOperationId: string | undefined;
}
export interface HoursOfOperation {
  HoursOfOperationId?: string;
  HoursOfOperationArn?: string;
  Name?: string;
  Description?: string;
  TimeZone?: string;
  Config?: HoursOfOperationConfig[];
  Tags?: Record<string, string>;
  LastModifiedTime?: Date;
  LastModifiedRegion?: string;
}
export interface DescribeHoursOfOperationResponse {
  HoursOfOperation?: HoursOfOperation;
}
export interface DescribeInstanceRequest {
  InstanceId: string | undefined;
}
export declare const InstanceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS";
};
export type InstanceStatus =
  (typeof InstanceStatus)[keyof typeof InstanceStatus];
export interface InstanceStatusReason {
  Message?: string;
}
export interface Instance {
  Id?: string;
  Arn?: string;
  IdentityManagementType?: DirectoryType;
  InstanceAlias?: string;
  CreatedTime?: Date;
  ServiceRole?: string;
  InstanceStatus?: InstanceStatus;
  StatusReason?: InstanceStatusReason;
  InboundCallsEnabled?: boolean;
  OutboundCallsEnabled?: boolean;
  InstanceAccessUrl?: string;
  Tags?: Record<string, string>;
}
export interface DescribeInstanceResponse {
  Instance?: Instance;
}
export declare const InstanceAttributeType: {
  readonly AUTO_RESOLVE_BEST_VOICES: "AUTO_RESOLVE_BEST_VOICES";
  readonly CONTACTFLOW_LOGS: "CONTACTFLOW_LOGS";
  readonly CONTACT_LENS: "CONTACT_LENS";
  readonly EARLY_MEDIA: "EARLY_MEDIA";
  readonly ENHANCED_CHAT_MONITORING: "ENHANCED_CHAT_MONITORING";
  readonly ENHANCED_CONTACT_MONITORING: "ENHANCED_CONTACT_MONITORING";
  readonly HIGH_VOLUME_OUTBOUND: "HIGH_VOLUME_OUTBOUND";
  readonly INBOUND_CALLS: "INBOUND_CALLS";
  readonly MULTI_PARTY_CONFERENCE: "MULTI_PARTY_CONFERENCE";
  readonly OUTBOUND_CALLS: "OUTBOUND_CALLS";
  readonly USE_CUSTOM_TTS_VOICES: "USE_CUSTOM_TTS_VOICES";
};
export type InstanceAttributeType =
  (typeof InstanceAttributeType)[keyof typeof InstanceAttributeType];
export interface DescribeInstanceAttributeRequest {
  InstanceId: string | undefined;
  AttributeType: InstanceAttributeType | undefined;
}
export interface Attribute {
  AttributeType?: InstanceAttributeType;
  Value?: string;
}
export interface DescribeInstanceAttributeResponse {
  Attribute?: Attribute;
}
export interface DescribeInstanceStorageConfigRequest {
  InstanceId: string | undefined;
  AssociationId: string | undefined;
  ResourceType: InstanceStorageResourceType | undefined;
}
export interface DescribeInstanceStorageConfigResponse {
  StorageConfig?: InstanceStorageConfig;
}
export interface DescribePhoneNumberRequest {
  PhoneNumberId: string | undefined;
}
export declare const CreateInstanceRequestFilterSensitiveLog: (
  obj: CreateInstanceRequest
) => any;
export declare const UserIdentityInfoFilterSensitiveLog: (
  obj: UserIdentityInfo
) => any;
export declare const CreateUserRequestFilterSensitiveLog: (
  obj: CreateUserRequest
) => any;
export declare const ViewInputContentFilterSensitiveLog: (
  obj: ViewInputContent
) => any;
export declare const CreateViewRequestFilterSensitiveLog: (
  obj: CreateViewRequest
) => any;
export declare const ViewContentFilterSensitiveLog: (obj: ViewContent) => any;
export declare const ViewFilterSensitiveLog: (obj: View) => any;
export declare const CreateViewResponseFilterSensitiveLog: (
  obj: CreateViewResponse
) => any;
export declare const CreateViewVersionResponseFilterSensitiveLog: (
  obj: CreateViewVersionResponse
) => any;
export declare const ContactFilterSensitiveLog: (obj: Contact) => any;
export declare const DescribeContactResponseFilterSensitiveLog: (
  obj: DescribeContactResponse
) => any;
export declare const InstanceFilterSensitiveLog: (obj: Instance) => any;
export declare const DescribeInstanceResponseFilterSensitiveLog: (
  obj: DescribeInstanceResponse
) => any;
